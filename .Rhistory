chol(corr)
library(dplyr)
df <- read.csv("Stocks1.csv")
head(df)
data <- data.frame(df["Date"])
data <- slice(data, 1:(n()-1))
for(i in colnames(df)[2:length(colnames(df))]){
v = as.vector(unlist(df[i]))
vr = diff(v)/(v[-length(v)])
data[i] <- vr
}
rownames(data) <- data$Date
data$Date <- NULL
head(data)
corr <- cor(data)
rets <- c()
for(i in colnames(data)[1:length(colnames(data))]){
v <- as.vector(unlist(data[i]))
rets <- c(rets, mean(v))
}
rets <- matrix(rets)
rownames(rets) <- colnames(data)
colnames(rets) <- ("Returns")
df$Date <- NULL
s0 <- matrix(df %>% slice(nrow(df)))
rownames(s0) <- colnames(data)
colnames(s0) <- ("Current Prices")
chol(corr)
cdcorr_t <- chol(corr)
cdcorr <- t(cdcorr_t)
cdcorr
corr
cdcorr %*% cdcorr_t
cdcorr %*% cdcorr_t == corr
n = 1000 # number of simulations
normvars <- rnorm(1000)
normvars
normvars <- rnorm(length(corr))
normvars
normvars <- rnorm(nrows(corr))
normvars
normvars <- rnorm(nrow(corr))
normvars
cdcorr %*% normvars
cdcorr_t %*% normvars
cdcorr
corrWiener <- cdcorr%*% normvars
corrWiener
cdcorr
normvars
matrix(5,5)
matrix(0, 5,5)
col(matrix(0,5,5))
a<-matrix(0,5,5)
a[1]
a
a[1,1]
a[2,2]
a[1]
a<-matrix((1,2,3,4), (5,6,7,8))
a <- matrix(1:10, 5,5)
a
a[1]
a[2]
a[1,1]
a[1,2]
a[,1]
range(0,10)
seq(from = 1, to = 5, by = 1)
normvars <- matrix(rnorm(5), 5, 10)
normvars
normvars2 <- matrix(rnorm(5), 5, 10)
normvars2
a <- c()
cbind(a,1)
cbind(a, 1:5)
a <- matrix()
aÃ 
a
cbind(a, 1:5)
a <- matrix(0,5)
cbind(a,1:5)
a <- a[,1]
a
a <- matrix(0,5)
cbind(a,1:5)
a <- a[,-1]
a
a <- matrix(1:5,5, 5)
a
a[,-1]
a <- matrix(1:10, 4,4)
a <- matrix(1:5, 4,4)
a<-matrix(1:10, 10, 10)
a
cbind(a,20:30)
a
a <- cbind(a, 21:30)
a
#In####
#s0####Initial stock prices
#t#####Time steps number
#m#####mean
#sig###standard deviations
#ch####Lower triangular cholesky times correlation matrix
#dt####time intervals
GBMf <- function(s0, t, m, sig, ch, dt = 1./365){
path <- cbind(s0, matrix(0, nrow(ch), t))
normvars <- matrix(rnorm(nrow(ch), nrow(ch), t))
for(i in seq(from = 1, to = t, by = 1)){
cw <- ch %*% normvars[,i]
rand <- sig*sqrt(dt)*cw
drift <- (m - (sig^2)/2)*dt
st <- path[i]*exp(drift + rand)
path[,i+1] <- st
}
path
}
View(GBMf)
library(dplyr)
###############Importing dataset####################################################
df <- read.csv("Stocks1.csv")
head(df)
###############Transforming Prices to returns#######################################
data <- data.frame(df["Date"])
data <- slice(data, 1:(n()-1))
for(i in colnames(df)[2:length(colnames(df))]){
v = as.vector(unlist(df[i]))
vr = diff(v)/(v[-length(v)])
data[i] <- vr
}
rownames(data) <- data$Date
data$Date <- NULL
head(data)
###############Calculating Returns and Covariance Matrix#############################
corr <- cor(data)
rets <- c()
for(i in colnames(data)[1:length(colnames(data))]){
v <- as.vector(unlist(data[i]))
rets <- c(rets, mean(v))
}
rets <- matrix(rets)
rownames(rets) <- colnames(data)
colnames(rets) <- ("Returns")
################Current stock returns################################################
df$Date <- NULL
s0 <- matrix(df %>% slice(nrow(df)))
rownames(s0) <- colnames(data)
colnames(s0) <- ("Current Prices")
s0
library(dplyr)
###############Importing dataset####################################################
df <- read.csv("Stocks1.csv")
head(df)
###############Transforming Prices to returns#######################################
data <- data.frame(df["Date"])
data <- slice(data, 1:(n()-1))
for(i in colnames(df)[2:length(colnames(df))]){
v = as.vector(unlist(df[i]))
vr = diff(v)/(v[-length(v)])
data[i] <- vr
}
rownames(data) <- data$Date
data$Date <- NULL
head(data)
###############Calculating Returns and Covariance Matrix#############################
corr <- cor(data)
rets <- c()
for(i in colnames(data)[1:length(colnames(data))]){
v <- as.vector(unlist(data[i]))
rets <- c(rets, mean(v))
}
rets <- matrix(rets)
rownames(rets) <- colnames(data)
colnames(rets) <- ("Returns")
################Current stock returns################################################
df$Date <- NULL
s0 <- matrix(df %>% slice(nrow(df)))
rownames(s0) <- colnames(data)
colnames(s0) <- ("Current Prices")
################Cholesky Decomposition###############################################
cdcorr_t <- chol(corr)
cdcorr <- t(cdcorr_t)
cdcorr %*% cdcorr_t
################Standard Normal Variates#############################################
normvars <- rnorm(nrow(corr))
corrWiener <- cdcorr%*% normvars
#In####
#s0####Initial stock prices
#t#####Time steps number
#m#####mean
#sig###standard deviations
#ch####Lower triangular cholesky times correlation matrix
#dt####time intervals
GBMf <- function(s0, t, m, sig, ch, dt = 1./365){
path <- cbind(s0, matrix(0, nrow(ch), t))
normvars <- matrix(rnorm(nrow(ch), nrow(ch), t))
for(i in seq(from = 1, to = t, by = 1)){
cw <- ch %*% normvars[,i]
rand <- sig*sqrt(dt)*cw
drift <- (m - (sig^2)/2)*dt
st <- path[i]*exp(drift + rand)
path[,i+1] <- st
}
path
}
cdcorr
mean
library(dplyr)
###############Importing dataset####################################################
df <- read.csv("Stocks1.csv")
head(df)
###############Transforming Prices to returns#######################################
data <- data.frame(df["Date"])
data <- slice(data, 1:(n()-1))
for(i in colnames(df)[2:length(colnames(df))]){
v = as.vector(unlist(df[i]))
vr = diff(v)/(v[-length(v)])
data[i] <- vr
}
rownames(data) <- data$Date
data$Date <- NULL
head(data)
###############Calculating Returns and Covariance Matrix#############################
corr <- cor(data)
rets <- c()
for(i in colnames(data)[1:length(colnames(data))]){
v <- as.vector(unlist(data[i]))
rets <- c(rets, mean(v))
}
rets <- matrix(rets)
rownames(rets) <- colnames(data)
colnames(rets) <- ("Returns")
################Current stock returns################################################
df$Date <- NULL
s0 <- matrix(df %>% slice(nrow(df)))
rownames(s0) <- colnames(data)
colnames(s0) <- ("Current Prices")
################Cholesky Decomposition###############################################
cdcorr_t <- chol(corr)
cdcorr <- t(cdcorr_t)
cdcorr %*% cdcorr_t
################Standard Normal Variates#############################################
normvars <- rnorm(nrow(corr))
corrWiener <- cdcorr%*% normvars
cdcorr
s0
rets
library(dplyr)
###############Importing dataset####################################################
df <- read.csv("Stocks1.csv")
head(df)
###############Transforming Prices to returns#######################################
data <- data.frame(df["Date"])
data <- slice(data, 1:(n()-1))
for(i in colnames(df)[2:length(colnames(df))]){
v = as.vector(unlist(df[i]))
vr = diff(v)/(v[-length(v)])
data[i] <- vr
}
rownames(data) <- data$Date
data$Date <- NULL
head(data)
###############Calculating Returns/stds and Covariance Matrix#############################
corr <- cor(data)
rets <- c()
sigmas <- c()
for(i in colnames(data)[1:length(colnames(data))]){
v <- as.vector(unlist(data[i]))
rets <- c(rets, mean(v))
sigmas <- c(sigmas, sd(v))
}
rets <- matrix(rets)
rownames(rets) <- colnames(data)
colnames(rets) <- ("Returns")
sigmas <- matrix(sigmas)
rownames(sigmas) <- colnames(data)
colnames(sigmas) <- ("Standard Deviations")
################Current stock returns################################################
df$Date <- NULL
s0 <- matrix(df %>% slice(nrow(df)))
rownames(s0) <- colnames(data)
colnames(s0) <- ("Current Prices")
################Cholesky Decomposition###############################################
cdcorr_t <- chol(corr)
cdcorr <- t(cdcorr_t)
cdcorr %*% cdcorr_t
################Standard Normal Variates#############################################
normvars <- rnorm(nrow(corr))
corrWiener <- cdcorr%*% normvars
cdcorr
s0
rets
sigmas
library(gbm.r)
gbm.r
source(gbm.r)
source(stock.r)
setwd("C:/Users/LorenzoFancelli/Desktop/My APP")
source(gbm.r)
source(stock.r)
source("gbm.r")
source("stock.r"")
source("gbm.r")
source("stock.r")
source("gbm.r")
source("stock.r")
s0
rets
cdcorr
sigmas
source("gbm.r")
source("stock.r")
GBMf(s0, 10, rets, sigmas, cdcorr)
source("gbm.r")
source("stock.r")
GBMf(s0, 10, rets, sigmas, cdcorr)
source("gbm.r")
source("stock.r")
GBMf(s0, 10, rets, sigmas, cdcorr)
source("gbm.r")
source("stock.r")
GBMf(s0, 10, rets, sigmas, cdcorr)
cbind(s0, matrix(0, 5, 10))
a <- cbind(s0, matrix(0, 5, 10))
a[,1]
a[,2]
q
a
a*2
rets
a[1]
a[1]*2
normvars <- matrix(rnorm(rnorm(5),5 ,10))
normvars[,1]
normvars
normvars <- matrix(rnorm(5),5 ,10))
normvars <- matrix(rnorm(5),5 ,10)
normvars
normvars[,1]
source("gbm.r")
source("stock.r")
GBMf(s0, 10, rets, sigmas, cdcorr)
s0
path
cbind(s0, matrix(5,5))
a[,1]
cbind(s0, matrix(5,5))[,1]
source("gbm.r")
source("stock.r")
GBMf(s0, 10, rets, sigmas, cdcorr)
s0
a <- matrix(cbind(s0, matrix(5,5))
a
a <- matrix(cbind(s0, matrix(5,5)))
a
GBMf(s0, 10, rets, sigmas, cdcorr)
s0
s0[1]
s0[1] *2
cdcorr
cdcorr[1] *2
matrix(df %>% slice(nrow(df)))
a <- matrix(df %>% slice(nrow(df)))
a[1]
a[1] *2
df[-1]
df[nrow(df)]
df[1,]
df
df[, nrow(df)]
df[, 50]
df[,1]
df[50,]
df[nrow(df),]
tail(df)
source("gbm.r")
source("stock.r")
GBMf(s0, 10, rets, sigmas, cdcorr)
s0
s0[1]
s0[1]*2
s0[[1]]*2
s0[[1]]
s0[1]
path <- cbind(s0, matrix(5,5)
)
path
path[1]
path[,1]
path[[,1]]
path[,[1]]
path[[1]]
source("gbm.r")
source("stock.r")
GBMf(s0, 10, rets, sigmas, cdcorr)
s0
cbind(s0, matrix(5,5))
source("gbm.r")
source("stock.r")
s0
s0[1]
s0
cbind(s0, matrix(5,5))
as.vector(cbind(s0, matrix(5,5)))
as.vector(cbind(s0, matrix(5,5)))[,1]
b <-data.farme(s0)
b<- data.frame(s0)
b
b[1]
b[,1]
cbind(s0, matrix(5,5))
b <- cbind(s0, matrix(5,5))
b[1]
c<- data.frame(b)
c
c[1]
c[2]
c[2]*2
c[[2]]
c[[[2]]]
c[2]
a
b
c
b[,1]
as.numeric(b[,1])
source("gbm.r")
source("stock.r")
GBMf(s0, 10, rets, sigmas, cdcorr)
normvars <- matrix(rnorm(5), 5, 100))
normvars <- matrix(rnorm(5), 5, 100)
normvars
normvars[,100]
source("gbm.r")
source("stock.r")
GBMf(s0, 10, rets, sigmas, cdcorr)
source("gbm.r")
source("stock.r")
GBMf(s0, 10, rets, sigmas, cdcorr)
normvars <- matrix(rnorm(nrow(ch), nrow(s0), t))
normvars <- matrix(rnorm(5, nrow(s0), t))
source("gbm.r")
source("stock.r")
GBMf(s0, 10, rets, sigmas, cdcorr)
source("gbm.r")
source("stock.r")
GBMf(s0, 250, rets, sigmas, cdcorr)
source("gbm.r")
source("stock.r")
GBMf(s0, 250, rets, sigmas, cdcorr)
source("gbm.r")
source("stock.r")
GBMf(s0, 250, rets, sigmas, cdcorr)
source("gbm.r")
source("stock.r")
paths <- GBMf(s0, 250, rets, sigmas, cdcorr)
paths.plot()
plot(paths)
paths
paths
paths[,1]
paths(1,)
source("gbm.r")
source("stock.r")
paths <- GBMf(s0, 250, rets, sigmas, cdcorr)
paths[1,]
paths(1,)
plot(paths(1,))
plot(paths[1,])
plot(as.numeric(paths[1,]))
source("gbm.r")
source("stock.r")
paths <- GBMf(s0, 250, rets, sigmas, cdcorr)
plot(as.numeric(paths[1,]))
paths <- GBMf(s0, 250, rets, sigmas, cdcorr)
plot(as.numeric(paths[1,]))
source("gbm.r")
source("stock.r")
GBMf(s0, 250, rets, sigmas, cdcorr)
source("gbm.r")
source("stock.r")
n<-GBMf(s0, 250, rets, sigmas, cdcorr)
n
n
matrix(rnorm(10), 10:10)
matrix(rnorm(10), 10,10)
source("gbm.r")
source("stock.r")
n<-GBMf(s0, 250, rets, sigmas, cdcorr)
b
n
source("gbm.r")
source("stock.r")
n<-GBMf(s0, 250, rets, sigmas, cdcorr)
source("gbm.r")
source("stock.r")
n<-GBMf(s0, 250, rets, sigmas, cdcorr)
plot(as.numeric(paths[1,]))
source("gbm.r")
source("stock.r")
paths<-GBMf(s0, 250, rets, sigmas, cdcorr)
plot(as.numeric(paths[1,]))
source("gbm.r")
source("stock.r")
paths<-GBMf(s0, 250, rets, sigmas, cdcorr)
plot(as.numeric(paths[1,]))
